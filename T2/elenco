#!/usr/bin/python3
import sys
import time
from functools import cmp_to_key

OPT = sys.maxsize
Xopt = []
atores = []
l = 0       # num de grupos
m = 0       # num de atores
n = 0       # num de personagens
count = 0
# argumentos:
lim_dada    = False # usar função limitante dos profs.
corte_via   = True  # cortes de viabilidade
corte_oti   = True  # cortes de otimalidade

class Ator:
    def __init__(self, valor, grupos, id):
        self.valor = valor
        self.grupos = grupos
        self.id = id

    def __repr__(self):
        return str(self.id)

    def __str__(self):
        return str(self.id)


def main():
    global atores
    global OPT
    global Xopt
    global count

    le_entrada()
    Escolhidos = []

    time_start = time.time()
    if not lim_dada:
        atores.sort(key=lambda x: x.valor)

    # atores.sort(key=lambda x: x.valor)

    resolver(Escolhidos, atores)
    time_end = time.time()
    
    if len(Xopt):
        Xopt.sort(key=lambda x: x.id)
        print(' '.join(str(x) for x in Xopt))
        print(OPT)
    else:
        print("Inviável")

    print(str(count) + "\n" + str(time_end - time_start), file=sys.stderr)

def le_entrada():
    # obtém entrada em formato de lista (um item para cada linha)
    entrada = sys.stdin.readlines()
    # retira os \n de cada linha de entrada
    for i, linha in enumerate(entrada):
        entrada[i] = linha.replace("\n", "")

    linha = entrada[0].split(" ")
    global l
    global m
    global n
    l = int(linha[0]) # num de grupos
    m = int(linha[1]) # num de atores
    n = int(linha[2]) # num de personagens
    global atores
    n_linha = 1
    atores = []
    Escolhidos = []
    Faltam = []
    # lê informação de cada ator
    for i in range(m):
        linha = entrada[n_linha].split(" ")
        valor = int(linha[0])
        
        s = int(linha[1])
        grupos = []
        n_linha += 1

        for j in range(s):
            grupos.append(int(entrada[n_linha]))
            n_linha += 1

        atores.append(Ator(valor, grupos, i + 1))


# função limitante que o prof deu
def limitanteDada(Escolhidos, Faltam):
    global n
    total = 0
    # faz o somatório
    for ator in Escolhidos:
        total += ator.valor

    total += (n - len(Escolhidos))* minimo(Faltam)     
    return total

def limitanteFeita(Escolhidos, Faltam):
    global n    # num de personagens
    n_escolhidos = len(Escolhidos)
    # o array de atores faltando está ordenado por menor valor por número de
    # grupos que o ator satisfaz 
    grupos = []
    total = 0
    for ator in Escolhidos:
        total += ator.valor
        
    i = 0
    while (n_escolhidos < n and i < len(Faltam)):
        total += Faltam[i].valor
        n_escolhidos += 1
        i += 1
    
    return total

# calculando o valor mínimo de um ator numa lista de atores
def minimo(atores):
    n_atores = len(atores)
    if (n_atores == 0):
        return 0    
    # assume como mais barato o primeiro do array
    min = atores[0].valor
    for i in range(1, n_atores):
        if (atores[i].valor < min):
            min = atores[i].valor
    return min
    
def verificaViabilidade(Escolhidos):
    global l
    global n
    # verifica se o num de atores escolhidos está correto
    if (len(Escolhidos) != n):
        return (False, 0)
    # verifica se todos os grupos estão representados
    grupos = dict()
    valor = 0
    for ator in Escolhidos:
        valor += ator.valor
        for n_grupo in ator.grupos:
            grupos[n_grupo] = 1

    if (len(grupos) < l):
        return (False, 0)
        
    return (True, valor)

def resolver(Escolhidos, Faltam):
    global OPT      # sol. ótima
    global Xopt     # val. sol. ótima
    global lim_dada # usar função limitante dos profs.
    global corte_via# cortes de viabilidade
    global corte_oti# cortes de otimalidade
    global count
    count += 1
    
    # verifica se o grupo de atores escolhidos é viável
    (viavel, novo_val) = verificaViabilidade(Escolhidos)
    if viavel:
        if novo_val < OPT:
            OPT = novo_val
            Xopt = Escolhidos
    # não tem mais atores para escolher
    if not len(Faltam):
        return
    # faz o corte de viabilidade (as escolhas de atores restantes formam uma resposta possível?)
    if corte_via:
        if cortaViabilidade(Escolhidos, Faltam):
            return
    # faz o corte de otimalidade (existe a possibilidade uma escolha de atores mais barata?)
    if corte_oti:
        B = OPT
        if lim_dada:
            B = limitanteDada(Escolhidos, Faltam)
        else:
            B = limitanteFeita(Escolhidos, Faltam)
        if (B >= OPT):
            return
    
    # ainda falta escolher atores        
    E = Escolhidos.copy()
    F = Faltam.copy()
    ator = F.pop(0)
    # decido não escolher o próximo ator
    resolver(E, F)
    # decido escolher o próximo ator
    E.append(ator)
    resolver(E, F)

def cortaViabilidade(Escolhidos, Faltam):
    global l        # num de grupos
    global n        # num. personagens
    
    if (len(Faltam) + len(Escolhidos) < n ):
        return True # se for menos que precisamos, corta
    # verifica se o número de grupos (distintos) dos personagens escolhidos + o número de
    # grupos dos atores restantes (que não foram escolhidos) satisfaz o valor mínimo
    grupos = dict()
    for ator in Escolhidos:
        for n_grupo in ator.grupos:
            grupos[n_grupo] = 1
    
    for ator in Faltam:
        for n_grupo in ator.grupos:
            grupos[n_grupo] = 1
    
    if (len(grupos) < l):
        return True

    return False

if __name__ == "__main__": 
    for arg in sys.argv:
        if arg == "-a":
            lim_dada  = True
        if arg == "-f":
            corte_via = False
        if arg == "-o":
            corte_oti = False
    main()
