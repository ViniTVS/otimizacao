#!/usr/bin/python3
import sys

OPT = sys.maxsize
Xopt = []
grupos = 0
l = 0 # num de grupos
m = 0 # num de atores
n = 0 # num de personagens

class Ator:
    def __init__(self, valor, grupos):
        self.valor = valor
        self.grupos = grupos

    def print(self):
        print("Valor:", self.valor, "Grupos:", self.grupos)

def main():
    # obtém entrada em formato de lista (um item para cada linha)
    entrada = sys.stdin.readlines()
    # retira os \n de cada linha de entrada
    for i, linha in enumerate(entrada):
        entrada[i] = linha.replace("\n", "")

    linha = entrada[0].split(" ")
    global l
    global m
    global n
    l = int(linha[0]) # num de grupos
    m = int(linha[1]) # num de atores
    n = int(linha[2]) # num de personagens

    n_linha = 1
    atores = []
    for i in range(m):
        linha = entrada[n_linha].split(" ")
        valor = int(linha[0])
        
        s = int(linha[1])
        grupos = []
        n_linha += 1

        for j in range(s):
            grupos.append(int(entrada[n_linha]))
            n_linha += 1

        atores.append(Ator(valor, grupos))


    atores_escolhidos = []
    atores_faltando = []
    # escolho o ator 2
    atores_escolhidos.append(atores[1])
    atores.pop(1)
    # atores_escolhidos.append(atores[1])
    # atores.pop(1)
    atores_escolhidos.append(atores[0])
    atores.pop(0)
    # e passo os demais p/ os que faltam
    for ator in atores:
        atores_faltando.append(ator)

    print("Atores escolhidos:")
    for ator in atores_escolhidos:
        ator.print()
    # print(limitanteDada(atores_escolhidos, atores_faltando, len(atores)))
    print(viavel(atores_escolhidos))



# função limitante que o prof deu
def limitanteDada(atores_escolhidos, atores_faltando, n_atores):
    total = 0
    # faz o somatório
    for ator in atores_escolhidos:
        total += ator.valor

    total += (n_atores - len(atores_escolhidos))* minimo(atores_faltando) 
    return total

    
# calculando o valor mínimo de um ator numa lista de atores
def minimo(atores):
    n_atores = len(atores)
    if (n_atores == 0):
        return 0    
    # assume como mais barato o primeiro do array
    min = atores[0].valor
    for i in range(1, n_atores):
        if (atores[i].valor < min):
            min = atores[i].valor

    return min

def viavel(atores_escolhidos):
    global l
    global n
    # verifica se o num de atores escolhidos está correto
    if (len(atores_escolhidos) != n):
        return False
    # verifica se todos os grupos estão representados
    grupos = []
    for ator in atores_escolhidos:
        for grupo in ator.grupos:
            if not(grupo in grupos):
                grupos.append(grupo)

    if (len(grupos) == l):
        return True
    return False

# def resolver(indice, insere, atores, atores_escolhidos, atores_restantes):
#     if viavel(atores_escolhidos):
#         if 
#     else:
    
    
#     return 0

if __name__ == "__main__":
    main()